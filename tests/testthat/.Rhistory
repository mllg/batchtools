reticulate::repl_python()
setwd("./software/batchtools/")
library(devtools)
library(devtools)
devtools::document()
remove.packages("batchtools")
library(devtools)
?install_local
getwd()
install_local(".", build_vignettes = F)
library(batchtools)
reg = makeExperimentRegistry(file.dir = NA, fix.seed = TRUE)
subsample = function(data, job, ratio, ...) {
n = nrow(data)
train = sample(n, floor(n * ratio))
test = setdiff(seq_len(n), train)
list(test = test, train = train)
}
data("iris", package = "datasets")
addProblem(name = "iris", data = iris, fun = subsample, seed = 42)
library("batchtools")
reg = makeExperimentRegistry(file.dir = NA, fix.seed = TRUE)
?makeExperimentRegistry
??makeExperimentRegistry
?makeRegistry
??makeRegistry
?addAlgorithm
??addAlgorithm
?install_local
remove.packages("batchtools")
devtools::document()
library(roxygen2)
devtools::document()
getwd()
setwd("../")
devtools::document("./batchtools")
devtools::document("./batchtools")
setwd("./batchtools/")
devtools::document("./batchtools")
devtools::document(".")
library(devtools)
devtools::document(".")
?document
devtools::document(pkg = as.package("."))
devtools::document(pkg = as.package("."))
library(batchtools)
getwd()
install_local(".")
library("batchtools")
reg = makeExperimentRegistry(file.dir = NA, fix.seed = TRUE)
library(batchtools)
reg = makeExperimentRegistry(file.dir = NA, fix.seed = TRUE)
subsample = function(data, job, ratio, ...) {
n = nrow(data)
train = sample(n, floor(n * ratio))
test = setdiff(seq_len(n), train)
list(test = test, train = train)
}
data("iris", package = "datasets")
addProblem(name = "iris", data = iris, fun = subsample, seed = 42)
remove.packages("batchtools")
library(devtools)
getwd()
setwd("..")
install_local("./batchtools/", build_vignettes = FALSE)
libray(batchtools)
library(batchtools)
reg = makeExperimentRegistry(file.dir = NA, fix.seed = TRUE)
library(batchtools)
reg = makeExperimentRegistry(file.dir = NA, fix.seed = TRUE)
remove.packages("batchtools")
library(devtools)
getwd()
setwd("batchtools")
devtools::load_all()
devtools::document()
setwd("../")
devtools::install_local("./batchtools")
library(devtools)
reg = makeExperimentRegistry(file.dir = NA, fix.seed = TRUE)
library(devtools)
?makeRegistry
??makeRegistry
getwd()
setwd("batchtools")
remove.packages("batchtools")
library(devtools)
devtools::load_all()
devtools::document()
devtools::install_local(".")
library("batchtools")
reg = makeExperimentRegistry(file.dir = NA, fix.seed = TRUE)
subsample = function(data, job, ratio, ...) {
n = nrow(data)
train = sample(n, floor(n * ratio))
test = setdiff(seq_len(n), train)
list(test = test, train = train)
}
data("iris", package = "datasets")
addProblem(name = "iris", data = iris, fun = subsample, seed = 42)
svm.wrapper = function(data, job, instance, ...) {
library("e1071")
mod = svm(Species ~ ., data = data[instance$train, ], ...)
pred = predict(mod, newdata = data[instance$test, ], type = "class")
table(data$Species[instance$test], pred)
}
addAlgorithm(name = "svm", fun = svm.wrapper)
forest.wrapper = function(data, job, instance, ...) {
library("ranger")
mod = ranger(Species ~ ., data = data[instance$train, ], write.forest = TRUE)
pred = predict(mod, data = data[instance$test, ])
table(data$Species[instance$test], pred$predictions)
}
addAlgorithm(name = "forest", fun = forest.wrapper)
# problem design: try two values for the ratio parameter
pdes = list(iris = data.table(ratio = c(0.67, 0.9)))
# algorithm design: try combinations of kernel and epsilon exhaustively,
# try different number of trees for the forest
ades = list(
svm = CJ(kernel = c("linear", "polynomial", "radial"), epsilon = c(0.01, 0.1)),
forest = data.table(ntree = c(100, 500, 1000))
)
addExperiments(pdes, ades, repls = 5)
id1 = head(findExperiments(algo.name = "svm"), 1)
print(id1)
id2 = head(findExperiments(algo.name = "forest", algo.pars = (ntree == 1000)), 1)
print(id2)
walltime = "00:01:00"
memory = "1gb"
ncpus = 1
testJob(id = id1, reg = reg)
testJob(id = id2)
?load_all
?devtools::load_all
?makeRegistry
?with_seed
runif(1)
?runif
p1 = runif(1)
# setting R_TESTS to empty string because of
# https://github.com/hadley/testthat/issues/144
# revert this when that issue in R is fixed.
Sys.setenv("R_TESTS" = "")
library(testthat)
library(batchtools)
test_check("batchtools")
getwd()
setwd("./test")
setwd("./tests/")
# setting R_TESTS to empty string because of
# https://github.com/hadley/testthat/issues/144
# revert this when that issue in R is fixed.
Sys.setenv("R_TESTS" = "")
library(testthat)
library(batchtools)
test_check("batchtools")
?JobCollection
?getJob
??getJob.JobCollection
?JobCollection
tmp = makeRegistry(file.dir = NA, make.default = FALSE, packages = "methods")
batchMap(identity, 1:5, reg = tmp)
jc = makeJobCollection(1:3, resources = list(foo = "bar"), reg = tmp)
jc
jc$jobs
jc$jobs[1]
j=jc$jobs[1]
j$job.pars
j$job.id
ls(jc)
jc$resources
?ExperimentCollection
??ExperimentCollection
# setting R_TESTS to empty string because of
# https://github.com/hadley/testthat/issues/144
# revert this when that issue in R is fixed.
Sys.setenv("R_TESTS" = "")
library(testthat)
library(batchtools)
test_check("batchtools")
getwd()
setwd("..")
remove.packages("batchtools")
library(devtools)
devtools::load_all()
devtools::document()
setwd("../")
library(devtools)
getwd()
setwd("./batchtools")
devtools::load_all()
devtools::document()
devtools::install_local(".")
getwd()
setwd("./tes")
setwd("./tests/")
# setting R_TESTS to empty string because of
# https://github.com/hadley/testthat/issues/144
# revert this when that issue in R is fixed.
Sys.setenv("R_TESTS" = "")
library(testthat)
library(batchtools)
test_check("batchtools")
reg = makeTestRegistry(seed = 1)
batchMap(function(x, .job) list(seed = .job$seed), x = 1:3, reg = reg)
submitAndWait(reg)
getwd()
setwd("./testthat/")
source("helper.R")
reg = makeTestRegistry(seed = 1)
batchMap(function(x, .job) list(seed = .job$seed), x = 1:3, reg = reg)
submitAndWait(reg)
res = unwrap(reduceResultsDataTable(reg = reg))
res
expect_data_table(res, nrow = 3, ncol = 2)
expect_identical(res$seed, 2:4)
expect_true(any(stri_detect_fixed(getLog(1, reg = reg), "Setting seed to 2")))
expect_true(any(stri_detect_fixed(getLog(2, reg = reg), "Setting seed to 3")))
expect_true(any(stri_detect_fixed(getLog(3, reg = reg), "Setting seed to 4")))
reg = makeTestExperimentRegistry(seed = 1)
addProblem(reg = reg, "p1", fun = function(job, ...) job$seed, seed = 100L)
Job
addAlgorithm(reg = reg, "a1", fun = function(job, instance, ...) list(instance = instance, seed = job$seed))
ids = addExperiments(repls = 2, reg = reg)
getStatus(reg = reg)
submitAndWait(reg)
res = unwrap(reduceResultsDataTable(reg = reg))
res
expect_identical(res$instance, 2:3)
expect_identical(res$seed, 2:3)
reg = makeTestExperimentRegistry(seed = 1, fix.seed = TRUE)
addProblem(reg = reg, "p1", fun = function(job, ...) job$seed, seed = 100L)
addAlgorithm(reg = reg, "a1", fun = function(job, instance, ...) list(instance = instance, seed = job$seed))
ids = addExperiments(repls = 2, reg = reg)
getStatus(reg = reg)
submitAndWait(reg)
res = unwrap(reduceResultsDataTable(reg = reg))
res
reg = makeTestRegistry(seed = 1, fix.seed = TRUE)
batchMap(function(x, .job) list(seed = .job$seed), x = 1:3, reg = reg)
reg$fix.seed
submitAndWait(reg)
res = unwrap(reduceResultsDataTable(reg = reg))
res
expect_data_table(res, nrow = 3, ncol = 2)
expect_identical(res$seed, 1)
expect_identical(res$seed, rep(1, 3))
rep(1,2)
rep(1,2)
rep(1,3)
rep.int(1,3)
expect_identical(res$seed, rep.int(1, 3))
res$seed
expect_identical(res$seed, 1:3)
expect_identical(res$seed, c(1,1,1))
expect_identical(res$seed, list(1,1,1))
expect_identical(res$seed, int(1,1,1))
typeof(res$seed)
g = rep.int(1,3)
typeof(g)
g = rep.int(1L,3)
typeof(g)
expect_identical(res$seed, rep.int(1L,3))
any(stri_detect_fixed(getLog(1, reg = reg), "Setting seed to 2"))
any(stri_detect_fixed(getLog(1, reg = reg), "Setting seed to 1"))
reg = makeTestExperimentRegistry(seed = 1)
addProblem(reg = reg, "p1", fun = function(job, ...) job$seed, seed = 100L)
addAlgorithm(reg = reg, "a1", fun = function(job, instance, ...) list(instance = instance, seed = job$seed))
ids = addExperiments(repls = 2, reg = reg)
getStatus(reg = reg)
submitAndWait(reg)
res = unwrap(reduceResultsDataTable(reg = reg))
res
reg = makeTestExperimentRegistry(seed = 1, fix.seed = TRUE)
addProblem(reg = reg, "p1", fun = function(job, ...) job$seed, seed = 100L)
addAlgorithm(reg = reg, "a1", fun = function(job, instance, ...) list(instance = instance, seed = job$seed))
ids = addExperiments(repls = 2, reg = reg)
getStatus(reg = reg)
submitAndWait(reg)
res = unwrap(reduceResultsDataTable(reg = reg))
res
res = unwrap(reduceResultsDataTable(reg = reg))
expect_data_table(res, nrow = 2, ncol = 3)
expect_identical(res$instance, 2:3)
expect_identical(res$seed, rep.int(1L, 3))
res$seed
res = unwrap(reduceResultsDataTable(reg = reg))
expect_data_table(res, nrow = 2, ncol = 3)
expect_identical(res$instance, 2:3)
expect_identical(res$seed, rep.int(1L, 2))
res$instance
reg = makeTestExperimentRegistry(seed = 1, fix.seed = TRUE)
addProblem(reg = reg, "p1", fun = function(job, ...) job$seed, seed = 100L)
addAlgorithm(reg = reg, "a1", fun = function(job, instance, ...) list(instance = instance, seed = job$seed))
ids = addExperiments(repls = 2, reg = reg)
getStatus(reg = reg)
submitAndWait(reg)
res = unwrap(reduceResultsDataTable(reg = reg))
res
?addAlgorithm
??addAlgorithm
reg
reg$defs
reg$defs$problem
reg$defs$problem[1]
reg$defs$prob.pars
reg$defs$prob.pars[[1]]
reg = makeTestRegistry(seed = 1)
batchMap(function(x, .job) list(seed = .job$seed), x = 1:3, reg = reg)
submitAndWait(reg)
res = unwrap(reduceResultsDataTable(reg = reg))
expect_data_table(res, nrow = 3, ncol = 2)
expect_identical(res$seed, 2:4)
expect_true(any(stri_detect_fixed(getLog(1, reg = reg), "Setting seed to 2")))
expect_true(any(stri_detect_fixed(getLog(2, reg = reg), "Setting seed to 3")))
expect_true(any(stri_detect_fixed(getLog(3, reg = reg), "Setting seed to 4")))
reg = makeTestExperimentRegistry(seed = 1)
addProblem(reg = reg, "p1", fun = function(job, ...) job$seed, seed = 100L)
addAlgorithm(reg = reg, "a1", fun = function(job, instance, ...) list(instance = instance, seed = job$seed))
ids = addExperiments(repls = 2, reg = reg)
getStatus(reg = reg)
submitAndWait(reg)
res = unwrap(reduceResultsDataTable(reg = reg))
res
reg = makeTestExperimentRegistry(seed = 1)
addProblem(reg = reg, "p1", fun = function(job, ...) job$seed, seed = 100L)
reg
reg$fix.seed
reg$problems
addAlgorithm(reg = reg, "a1", fun = function(job, instance, ...) list(instance = instance, seed = job$seed))
ids = addExperiments(repls = 2, reg = reg)
ids
reg$algorithms
reg$defs
reg$defs[1]$algo.pars
reg$defs[1]$prob.pars
getStatus(reg = reg)
submitAndWait(reg)
res = unwrap(reduceResultsDataTable(reg = reg))
res
reg$fix.seed
reg = makeTestExperimentRegistry(seed = 1, fix.seed = TRUE)
addProblem(reg = reg, "p1", fun = function(job, ...) job$seed, seed = 100L)
reg$problems
addAlgorithm(reg = reg, "a1", fun = function(job, instance, ...) list(instance = instance, seed = job$seed))
ids = addExperiments(repls = 2, reg = reg)
getStatus(reg = reg)
submitAndWait(reg)
reg
reg
reg$problems
res = unwrap(reduceResultsDataTable(reg = reg))
res
