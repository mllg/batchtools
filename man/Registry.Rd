% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Registry.R
\name{getDefaultRegistry}
\alias{Registry}
\alias{clearDefaultRegistry}
\alias{getDefaultRegistry}
\alias{loadRegistry}
\alias{makeRegistry}
\alias{saveRegistry}
\alias{setDefaultRegistry}
\alias{sweepRegistry}
\alias{syncRegistry}
\title{Registry}
\usage{
getDefaultRegistry()

setDefaultRegistry(reg)

clearDefaultRegistry()

makeRegistry(file.dir = "registry", work.dir = getwd(),
  conf.file = "~/.batchtools.conf.r", packages = character(0L),
  namespaces = character(0L), source = character(0L),
  load = character(0L), seed = NULL, make.default = TRUE)

loadRegistry(file.dir = "registry", work.dir = NULL,
  conf.file = "~/.batchtools.conf.r", make.default = TRUE,
  update.paths = FALSE)

saveRegistry(reg = getDefaultRegistry())

sweepRegistry(reg = getDefaultRegistry())

syncRegistry(reg = getDefaultRegistry(), save = TRUE)
}
\arguments{
\item{reg}{[\code{\link{Registry}}]\cr
Registry. If not explicitly passed, uses the last created registry.}

\item{file.dir}{[\code{character(1)}]\cr
  Path where all files of the registry are saved.
  Default is directory \dQuote{registry} in the current working directory.

  If you pass \code{NA}, a temporary directory will be used.
  This way, you can create disposable registries for \code{\link{btlapply}} or examples.
  By default, the temporary directory \code{\link[base]{tempdir}()} will be used.
  If you want to use another temp directory, e.g. a directory which is shared between nodes,
  you can set it in your configuration via \code{temp.dir}.}

\item{work.dir}{[\code{character(1)}]\cr
Working directory for R process when experiment is executed.
For \code{makeRegistry}, this defaults to the current working directory.
\code{loadRegistry} uses the stored \code{work.dir}, but you may also explicitly provide one
yourself.}

\item{conf.file}{[\code{character(1)}]\cr
Path to a configuration file which is sourced directly after the registry is created.
For example, you can set system-specific cluster functions in it.
The script is executed inside the registry environment, thus you can directly set
all slots, e.g. \dQuote{debug = TRUE} would overwrite the debug flag of the registry.}

\item{packages}{[\code{character}]\cr
Packages that will always be loaded on each node.
Uses \code{\link[base]{require}} internally.
Default is \code{character(0)}.}

\item{namespaces}{[\code{character}]\cr
Same as \code{packages}, but the packages will not be attached.
Uses \code{\link[base]{requireNamespace}} internally.
Default is \code{character(0)}.}

\item{source}{[\code{character}]\cr
Files which should be sourced on the slaves prior to executing a job.
Calls \code{\link[base]{sys.source}} using the \code{\link[base]{.GlobalEnv}}.}

\item{load}{[\code{character}]\cr
Files which should be loaded on the slaves prior to executing a job.
Calls \code{\link[base]{load}} using the \code{\link[base]{.GlobalEnv}}.}

\item{seed}{[\code{integer(1)}]\cr
Start seed for jobs. Each job uses the (\code{seed} + \code{job.id}) as seed.
Default is a random number in the range [1, \code{.Machine$integer.max/2}].}

\item{make.default}{[\code{logical(1)}]\cr
If set to \code{TRUE}, the created registry is saved inside the package
namespace and acts as default registry. You might want to switch this
off if you work with multiple registries simultaneously.
Default is \code{TRUE}.}

\item{update.paths}{[\code{logical(1)}]\cr
If set to \code{TRUE}, the \code{file.dir} and \code{work.dir} will be updated in the registry. Note that this is
likely to break computation on the system, only do this if no jobs are currently running. Default is \code{FALSE}.
If the provided \code{file.dir} does not match the stored \code{file.dir}, \code{loadRegistry} will return a
registry in an read-only mode.}

\item{save}{[\code{logical(1)}]\cr
Save the registry to the file system? Default is \code{TRUE}.}
}
\value{
[\code{Registry}]. An environment with the following slots:
  \describe{
    \item{file.dir}{File directory.}
    \item{work.dir}{Working directory.}
    \item{packages}{Packages to load on the slaves.}
    \item{namespaces}{Namespaces to load on the slaves.}
    \item{seed}{Registry seed. Before each job is executed, the seed \code{seed + job.id} is set.}
    \item{debug}{Flag to turn additional debug functionality on.}
    \item{cluster.functions}{Usually set in your \code{conf.file}. Set via a call to \code{\link{makeClusterFunctions}}. See example.}
    \item{default.resources}{Usually set in your \code{conf.file}. Named list of default resources.}
    \item{max.concurrent.jobs}{Usually set in your \code{conf.file}. Maximum number of concurrent jobs for a single user on the system. \code{\link{submitJobs}} will try to respect this setting.}
    \item{defs}{Table with job definitions (i.e. parameters).}
    \item{status}{Table holding information about the computational status. Also see \code{\link{getJobStatus}}.}
    \item{resources}{Table holding information about the computational resources used for the job. Also see \code{\link{getJobResources}}.}
  }
}
\description{
\code{makeRegistry} constructs the inter-communication object for all functions in \code{batchtools}.
The registry created last is saved in the package namespace (unless \code{make.default} is set to
\code{FALSE}) and can be retrieved via \code{getDefaultRegistry}.

\code{saveRegistry} serializes the registry to the file system.
\code{syncRegistry} refreshes the registry by parsing updates from remote jobs, merging job
status information in the internal data base.
Both functions are called internally whenever required.
Therefore it should be safe to quit the R session at any time.
Work can later be resumed by calling \code{loadRegistry} which de-serializes the registry from
the file system.

Canceled jobs and repeatedly submitted jobs leave in some cases stray files behind which can be
swept using \code{sweepRegistry}.
}
\examples{
reg = makeRegistry(file.dir = NA, make.default = FALSE)
print(reg)

#' Set debug mode
reg$debug = TRUE

# Set cluster functions to interactive mode (default)
reg$cluster.functions = makeClusterFunctionsInteractive()

# Change default packages
reg$packages = c("MASS")
saveRegistry(reg = reg)
}

