% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getJobInfo.r
\name{getJobInfo}
\alias{getJobInfo}
\alias{getJobPars}
\alias{getJobResources}
\alias{getJobStatus}
\title{Query Job Information}
\usage{
getJobInfo(ids = NULL, pars.as.cols = FALSE, prefix.pars = FALSE,
  resources.as.cols = FALSE, reg = getDefaultRegistry())

getJobStatus(ids = NULL, reg = getDefaultRegistry())

getJobResources(ids = NULL, resources.as.cols = FALSE,
  reg = getDefaultRegistry())

getJobPars(ids = NULL, pars.as.cols = FALSE, prefix.pars = FALSE,
  reg = getDefaultRegistry())
}
\arguments{
\item{ids}{[\code{\link[base]{data.frame}} or \code{integer}]\cr
A \code{\link[base]{data.frame}} (or \code{\link[data.table]{data.table}})
with a column named \dQuote{job.id}.
Alternatively, you may also pass a vector of integerish job ids.
If not set, defaults to all jobs.}

\item{pars.as.cols}{[\code{logical(1)}]\cr
Transform the job parameters to data frame columns? Default is \code{FALSE}.}

\item{prefix.pars}{[\code{logical(1)}]\cr
If set to \code{TRUE}, the prefix \dQuote{par.} is used for a regular
\code{\link{Registry}} to prefix parameter names of jobs while the
prefixes \dQuote{prob.par.} and \dQuote{algo.par.} are used for an
\code{\link{ExperimentRegistry}}. Has no effect if \code{pars.as.cols} is
\code{FALSE}.}

\item{resources.as.cols}{[\code{logical(1)}]\cr
Transform the resources data frame columns? Default is \code{FALSE}.}

\item{reg}{[\code{\link{Registry}}]\cr
Registry.}
}
\value{
[\code{data.frame}] with the following columns in no particular order:
\describe{
  \item{job.id}{Unique Job ID as integer.}
  \item{submitted}{Time the job was submitted to the batch system as \code{\link[base]{POSIXct}}.}
  \item{started}{Time the job was started on the batch system as \code{\link[base]{POSIXct}}.}
  \item{done}{Time the job terminated (successfully or with an error) as \code{\link[base]{POSIXct}}.}
  \item{error}{Either \code{NA} if the job terminated successfully or the error message.}
  \item{time.queued}{Time in seconds (as \code{\link[base]{difftime}}) the job was queued.}
  \item{time.running}{Time in seconds (as \code{\link[base]{difftime}}) the job was running.}
  \item{memory}{Estimate of the memory usage.}
  \item{batch.id}{Batch ID as reported by the scheduler.}
  \item{job.hash}{Unique string identifying the job or chunk.}
  \item{resources}{List of computational resources set for this job.}
  \item{resources.hash}{MD5 hash of the resource list.}
  \item{pars}{List of parameters/arguments for this job.}
  \item{pars.hash}{MD5 hash of the job parameters.}
  \item{problem}{Only for \code{\link{ExperimentRegistry}}: the problem identifier.}
  \item{algorithm}{Only for \code{\link{ExperimentRegistry}}: the algorithm identifier.}
}
}
\description{
\code{getJobStatus} returns the internal table which stores information about the computational
status of jobs, \code{getJobResources} a table with the resources which were set to submit the jobs
and \code{getJobPars} a table with the job parameters.

\code{getJobInfo} returns all these tables joined.
}
\examples{
reg = makeTempRegistry(make.default = FALSE)
f = function(x) if (x < 0) stop("x must be > 0") else sqrt(x)
batchMap(f, x = c(-1, 0, 1), reg = reg)
submitJobs(reg = reg)
waitForJobs(reg = reg)

getJobInfo(reg = reg, pars.as.cols = TRUE)
}

