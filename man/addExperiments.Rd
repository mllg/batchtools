% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/addExperiments.R
\name{addExperiments}
\alias{addExperiments}
\title{Add Experiments to the Registry}
\usage{
addExperiments(prob.designs = NULL, algo.designs = NULL, repls = 1L,
  combine = "crossprod", reg = getDefaultRegistry())
}
\arguments{
\item{prob.designs}{[named list of \code{\link[data.table]{data.table}} or \code{\link[base]{data.frame}}]\cr
Named list of data frames. The name must match the problem name while the column names correspond to parameters
of the problem.
If \code{NULL}, adds experiments for all defined problems without any hyperparameters set.}

\item{algo.designs}{[named list of \code{\link[data.table]{data.table}} or \code{\link[base]{data.frame}}]\cr
Named list of data frames. The name must match the algorithm name while the column names correspond to parameters
of the algorithm.
If \code{NULL}, adds experiments for all defined algorithms without any hyperparameters set.}

\item{repls}{[\code{integer(1)}]\cr
Number of replications for each distinct experiment.}

\item{combine}{[\code{character(1)}]\cr
How to combine the rows of a single problem design with the rows of a single algorithm design?
Default is \dQuote{crossprod} which combines each row of the problem design which each row of the algorithm design
in a cross-product fashion. Set to \dQuote{bind} to just \code{\link[base]{cbind}} the tables of
problem and algorithm designs where the shorter table is repeated if necessary.}

\item{reg}{[\code{\link{ExperimentRegistry}}]\cr
Registry. If not explicitly passed, uses the last created registry.}
}
\value{
[\code{\link{data.table}}]. Generated job ids are stored in the column \dQuote{job.id}.
  See \code{\link{JoinTables}} for examples on working with job tables.
}
\description{
Adds experiments for running algorithms on problems to the registry and thereby defines batch jobs.
If multiple problem designs or algorithm designs are provided, they are combined via the Cartesian product.
E.g., if you have two problems \code{p1} and \code{p2} and three algorithms \code{a1}, \code{a2} and \code{a3},
\code{addExperiments} creates experiments for the combinations \code{(p1, a1)}, \code{(p1, a2)},
\code{(p1, a3)}, \code{(p2, a1)}, \code{(p2, a2)} and \code{(p2, a3)}.

The combination of a single problem design with a single algorithm design (e.g., \code{p1, a1}) can be
controlled via the parameter \code{combine}.
}
\examples{
reg = makeExperimentRegistry(file.dir = NA, make.default = FALSE)

# add first problem
fun = function(job, data, n, mean, sd, ...) rnorm(n, mean = mean, sd = sd)
addProblem("p1", fun = fun, reg = reg)

# add second problem
fun = function(job, data, n, lamba, ...) rexp(n, lambda = lambda)
addProblem("p2", fun = fun, reg = reg)


# add first algorithm
fun = function(instance, method, ...) if (method == "mean") mean(instance) else median(instance)
addAlgorithm("a1", fun = fun, reg = reg)

# add second algorithm
fun = function(instance, ...) se(instance)
addAlgorithm("a2", reg = reg)

# define problem and algorithm designs
prob.designs = algo.designs = list()
prob.designs$p1 = expand.grid(n = 100, mean = -1:1, sd = 1:5)
prob.designs$p2 = data.table(lambda = 1:5)
algo.designs$a1 = data.table(method = c("mean", "median"))
algo.designs$a2 = data.table()

# add experiments
addExperiments(prob.designs, algo.designs, reg = reg)

# check what has been created
summarizeExperiments(reg = reg)
getJobPars(reg = reg)
}
\seealso{
Other Experiment: \code{\link{ExperimentRegistry}},
  \code{\link{removeExperiments}},
  \code{\link{summarizeExperiments}}
}

