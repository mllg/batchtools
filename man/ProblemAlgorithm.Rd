% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Algorithm.r, R/Problem.r
\name{addAlgorithm}
\alias{Algorithm}
\alias{Problem}
\alias{ProblemAlgorithm}
\alias{addAlgorithm}
\alias{addProblem}
\alias{removeAlgorithm}
\alias{removeProblem}
\title{Define Problems and Algorithms}
\usage{
addAlgorithm(name, fun, reg = getDefaultRegistry())

removeAlgorithm(name, reg = getDefaultRegistry())

addProblem(name, data = NULL, fun = NULL, seed = NULL,
  reg = getDefaultRegistry())

removeProblem(name, reg = getDefaultRegistry())
}
\arguments{
\item{name}{[\code{character(1)}]\cr
Unique identifier for the problem or algorithm.}

\item{fun}{[\code{function}]\cr
For \code{addProblem}, the stochastic problem part. The static part is passed to this function with name
\dQuote{data} and the \code{\link{Job}} is passed as \dQuote{job}.
For \code{addAlgorithm}, the algorithm function. The static part is passed as \dQuote{data}, the generated
problem instance is passed as \dQuote{instance} and the \code{\link{Job}} as \dQuote{job}.}

\item{reg}{[\code{\link{ExperimentRegistry}}]\cr
Registry. If not explicitly passed, uses the last created registry.}

\item{data}{[\code{ANY}]\cr
Static problem part. Default is \code{NULL}.}

\item{seed}{[\code{integer(1)}]\cr
Start seed for this problem. This allows the \dQuote{synchronization} of a stochastic
problem across algorithms, so that different algorithms are evaluated on the same stochastic instance.
If the problem seed is defined, the seeding mechanism works as follows:
(1) Before the dynamic part of a problem is instantiated,
the seed of the problem + [replication number] - 1 is set, i.e. the first
replication uses the problem seed. (2) The stochastic part of the problem is
instantiated. (3) From now on the usual experiment seed of the registry is used,
see \code{\link{ExperimentRegistry}}.
If \code{seed} is set to \code{NULL} (default), the job seed is used to instantiate the problem and
different algorithms see different stochastic instances of the same problem.}
}
\value{
[\code{Problem}]. Object of class \dQuote{Problem} (invisibly).
}
\description{
Problems may consist of up to two parts. A static, immutable part (\code{data} in \code{addProblem})
and a dynamic, stochastic part (\code{fun} in \code{addProblem}).
For example, for statistical learning problems a data frame would be the static problem part while
a resampling function would be the stochastic part which creates problem instance.
This instance is then typically passed to a learning algorithm like a wrapper around a statistical model
(\code{fun} in \code{addAlgorithm}).

The functions serialize the components to the file system and register the respective problem or algorithm
names in the \code{\link{ExperimentRegistry}}.
}

