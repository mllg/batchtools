% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/chunkIds.R
\name{chunkIds}
\alias{chunkIds}
\title{Chunk Jobs for Sequential Execution}
\usage{
chunkIds(ids = NULL, n.chunks = NULL, chunk.size = NULL,
  group.by = character(0L), reg = getDefaultRegistry())
}
\arguments{
\item{ids}{[\code{\link[base]{data.frame}} or \code{integer}]\cr
A \code{\link[base]{data.frame}} (or \code{\link[data.table]{data.table}})
with a column named \dQuote{job.id}.
Alternatively, you may also pass a vector of integerish job ids.
If not set, defaults to all jobs.}

\item{n.chunks}{[\code{integer(1)}]\cr
Requested number of chunks.
If more chunks than elements in \code{ids} are requested, empty chunks are
dropped. Cannot be used in combination with \code{chunks.size}.}

\item{chunk.size}{[\code{integer(1)}]\cr
Requested number of elements in each chunk.
Cannot be used in combination with \code{n.chunks}.
If \code{ids} cannot be chunked evenly, some chunks will have less elements.}

\item{group.by}{[\code{character(0)}]\cr
If \code{ids} is a \code{\link{data.frame}} with additional columns (besides \dQuote{job.id}),
then the chunking is done in subgroups defined by the columns \code{group.by}.
See example.}

\item{reg}{[\code{\link{Registry}}]\cr
Registry. If not explicitly passed, uses the last created registry.}
}
\value{
[\code{\link[data.table]{data.table}}] with columns \dQuote{job.id} and \dQuote{chunk}.
}
\description{
Partition jobs into \dQuote{chunks} which will be executed together on the nodes.

Chunks are submitted via \code{\link{submitJobs}} by simply providing
a data frame with columns \dQuote{job.id} and \dQuote{chunk}.
All jobs with the same chunk number will be grouped together on one node as a single
computational job.
}
\examples{
# chunking for Registry
reg = makeTempRegistry(make.default = FALSE)
ids = batchMap(identity, 1:25, reg = reg)
ids = ids[chunkIds(ids, chunk.size = 10, reg = reg)]
print(ids)
print(table(ids$chunk))

# Creating chunks for an ExperimentRegistry
reg = makeTempExperimentRegistry(make.default = FALSE)
prob = addProblem(reg = reg, "prob1", data = iris, fun = function(job, data) nrow(data))
prob = addProblem(reg = reg, "prob2", data = Titanic, fun = function(job, data) nrow(data))
algo = addAlgorithm(reg = reg, "algo", fun = function(job, data, instance, i, ...) problem)
prob.designs = list(prob1 = data.table(), prob2 = data.table(x = 1:2))
algo.designs = list(algo = data.table(i = 1:5))
addExperiments(prob.designs, algo.designs, repls = 10, reg = reg)

# -> group into chunks of 5 jobs, but do not mix problems
ids = getJobTable(reg = reg)[, .(job.id, problem, algorithm)]
ids = ids[chunkIds(ids, chunk.size = 5, group.by = "problem", reg = reg)]
print(ids)
dcast(ids, chunk ~ problem)
}

