#!/bin/bash
<%
## Set sane defaults
if (is.null(resources$modules))
  resources$modules = character(0L)
if (is.null(resources$parcpus))
    resources$parcpus = 1L

## Check variables
resources$walltime = checkmate::asInt(resources$walltime, lower = 60L, upper = 3600L * 672L)
resources$memory = checkmate::asInt(resources$memory, lower = 100L, upper = 64L * 1024L)
resources$parcpus = checkmate::asInt(resources$parcpus, lower = 1L)
checkmate::assertCharacter(resources$modules, any.missing = FALSE)
checkmate::assertString(resources$R)
if (!is.null(resources$type))
    checkmate::assertString(resources$type)
if (resources$memory > 15000)
    resources$type = "quad"

## first string of queue, selected by walltime
walltimes = 3600L * c(1L, 8L, 48L, 672L)
queue = c("short", "med", "long", "ultralong")[checkmate::wf(resources$walltime <= walltimes)]
modules = paste0(c("binutils", "gcc/4.8.5", "openblas", resources$R), collapse = " ")

## very ugly hack because we cannot log to data (nobackup) filesystem on lido,
## only home fs is available
## unfortunately there seems to be no generic solution
## does log path start with /data/?
log.file = log.file
if (length(grep("^/data/", log.file)) > 0L) {
  ## strip that
  log.file = substr(log.file, 7L, nchar(log.file))
  ## find next forward slash
  i = regexpr("/", log.file)
  if (i != -1) {
    ## this must be "user": e.g. /data/bischl/...
    user = substr(log.file, 1L, i-1L)
    ## put together
    log.file = sprintf("/home/%s/nobackup%s", user, substr(log.file, i, nchar(log.file)))
  }
}
-%>

#PBS -N <%= job.hash %>
#PBS -o <%= log.file %>
#PBS -l walltime=<%= resources$walltime %>,nodes=<%= resources$parcpus %><%= if (!is.null(resources$type)) paste0(":", resources$type) %>,vmem=<%= resources$memory %>M
#PBS -q <%= queue %>
#PBS -j oe

## setup modules
source /sysdata/shared/sfw/Modules/default/init/bash
module add <%= modules %>

## create our own temp dir and clean it up later, lido does not do this automatically
mkdir /scratch/${USER}-${PBS_JOBID}
export TMPDIR=/scratch/${USER}-${PBS_JOBID}
## run R
Rscript -e 'batchtools::doJobCollection("<%= uri %>")'
rm -rf /scratch/${USER}-${PBS_JOBID}
